@using Microsoft.AspNetCore.Components.Web.Virtualization
@using PiperPicker.Models;
@using piperpicker.Components
@using PiperPicker.Proxies
@using static PiperPicker.Proxies.MopidyProxy;

@inject IConfiguration Configuration
@inject MopidyProxy MopidyProxy

<div id="episodes-container" class="stackable">

    @if (_episodes != null)
    {
        <div id="episode-list" class="content-list">
            <Virtualize Items="@_episodes" Context="episode">
                <ListItem MopidyItem=episode></ListItem>
            </Virtualize>
        </div>
    }

</div>

@code {
    IList<MopidyItem> _episodes = default!;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var episodes = await MopidyProxy.GetEpisodes();


            var episodeNameFilter = Configuration["Mopidy:EpisodeList:StartWithFilter"];
            _episodes = episodes
                .Where(_ => _.Name.StartsWith(episodeNameFilter))
                .OrderByDescending(_ => _.Name)
                .ToList();

            StateHasChanged();
        }

        await base.OnAfterRenderAsync(firstRender);
    }
}