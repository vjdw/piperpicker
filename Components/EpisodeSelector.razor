@using Microsoft.AspNetCore.Components.Web.Virtualization
@using PiperPicker.Models;
@using piperpicker.Components
@using PiperPicker.Proxies
@using static PiperPicker.Proxies.MopidyProxy
@implements IDisposable

@inject IConfiguration Configuration
@inject MopidyProxy MopidyProxy

<div id="episodes-container" class="stackable">

    @if (_episodes != null)
    {
        <div id="episode-list" class="content-list">
            <Virtualize Items="@_episodes" Context="episode">
                <ListItem @key=episode.Uri MopidyItem=episode></ListItem>
            </Virtualize>
        </div>
    }

</div>

@code {
    internal static string RandomRadmacIdentifier = "Random RadMac";

    IList<MopidyItem> _episodes = default!;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            MopidyProxy.OnMopidyEpisodeListNotification += MopidyEpisodeListNotificationHandler;

            await LoadEpisodeList();

            StateHasChanged();
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task LoadEpisodeList()
    {
        var episodes = await MopidyProxy.GetEpisodes();
        var episodeNameFilter = Configuration["Mopidy:EpisodeList:StartWithFilter"];

        var randomRadMacListEntry = new List<MopidyItem> { new MopidyItem() { Name = RandomRadmacIdentifier, Uri = "https://0.0.0.0/random" } };
        var orderedEpisodes = episodes?
            .Where(_ => _.Name.StartsWith(episodeNameFilter))
            .OrderByDescending(_ => _.Name)
                ?? new List<MopidyItem>().AsEnumerable();
        _episodes = randomRadMacListEntry.Union(orderedEpisodes).ToList();
    }

    private void MopidyEpisodeListNotificationHandler(object sender, MopidyEpisodeListNotificationEventArgs notification)
    {
        InvokeAsync(async () =>
        {
            await LoadEpisodeList();
            StateHasChanged();
        });
    }

    public void Dispose()
    {
        MopidyProxy.OnMopidyEpisodeListNotification -= MopidyEpisodeListNotificationHandler;
    }
}