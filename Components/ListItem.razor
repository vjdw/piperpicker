@using Microsoft.AspNetCore.Components.Web.Virtualization
@using PiperPicker.Models;
@using System.Text.RegularExpressions;
@using piperpicker.Components
@using PiperPicker.Proxies
@using static PiperPicker.Proxies.MopidyProxy;

@implements IDisposable;

@inject MopidyProxy MopidyProxy

<div class="list-item">
    <span class=@DisplayNameLeadingDateClass()>@DisplayNameLeadingDate()</span>
    <input type="button" class="list-item-button button-4 @(isPlaying ? "is-playing" : "")" @key="MopidyItem.Uri" @onclick="ItemClickHandler" value="@DisplayNameWithoutLeadingDate()"></input>
</div>

@code {
    [Parameter]
    public MopidyItem MopidyItem { get; set; }

    private bool isPlaying = false;

    protected async override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            HandleNewState(await MopidyProxy.GetNowPlaying());
            MopidyProxy.OnMopidyNotification += MopidyNotificationHandler;
            StateHasChanged();
        }

        base.OnAfterRender(firstRender);
    }

    public void Dispose()
    {
        try
        {
            MopidyProxy.OnMopidyNotification -= MopidyNotificationHandler;
        }
        catch { }
    }

    private void MopidyNotificationHandler(object sender, MopidyNotificationEventArgs notification)
    {
        InvokeAsync(() =>
        {
            HandleNewState(notification.GetInfo());
            StateHasChanged();
        });
    }

    private void HandleNewState(MopidyNowPlayingState mopidyNowPlayingState)
    {
        var isChange = false;

        if (mopidyNowPlayingState.TrackUri == MopidyItem.Uri)
        {
            isChange = isPlaying == false;
            isPlaying = true;
        }
        else
        {
            isChange = isPlaying == true;
            isPlaying = false;
        }

        if (isChange)
            StateHasChanged();
    }

    private string DisplayName => MopidyItem.Name.Split('.').First().Replace("RadMac_", "").Replace("_", " ").Replace("*", "⭐");

    private string DisplayNameWithoutLeadingDate()
    {
        var displayName = DisplayName;
        var dateRegex = new Regex(@"\d\d\d\d-\d\d-\d\d");
        var date = dateRegex.Match(displayName).Value;
        var displayNameWithoutDate = string.IsNullOrWhiteSpace(date)
            ? displayName
            : displayName.Replace(date, "").Trim();

        return string.IsNullOrWhiteSpace(displayNameWithoutDate)
            ? date
            : displayNameWithoutDate;
    }

    private string DisplayNameLeadingDate()
    {
        if (MopidyItem.Name == EpisodeSelector.RandomRadmacIdentifier)
        {
            return "0000-00-00";
        }
        else
        {
            var displayName = DisplayName;
            var dateRegex = new Regex(@"\d\d\d\d-\d\d-\d\d");
            var date = dateRegex.Match(displayName).Value;
            return date;
        }
    }

    private string DisplayNameLeadingDateClass()
    {
        if (MopidyItem.Name == EpisodeSelector.RandomRadmacIdentifier)
        {
            return "hidden";
        }

        return string.Empty;
    }

    private async Task ItemClickHandler()
    {
        if (MopidyItem.Name == EpisodeSelector.RandomRadmacIdentifier)
        {
            await MopidyProxy.PlayRandomEpisode();
        }
        else
        {
            await MopidyProxy.PlayEpisode(MopidyItem.Uri);
        }
    }
}
