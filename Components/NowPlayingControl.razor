@using System.Net.WebSockets;
@using piperpicker.Components
@using PiperPicker.Proxies
@using static PiperPicker.Proxies.MopidyProxy;

@implements IDisposable;

@inject MopidyProxy MopidyProxy
@inject ILogger<NowPlayingControl> Logger

<div class="stackable">
    <div>
        <span id="trackname">@_mopidyNowPlayingState.TrackName</span>
        <br/>
        <span id="trackdescription">@(_mopidyNowPlayingState.TrackDescription ?? "")</span>
    </div>

    <div>
        <div class="icons-container">
            <div class="icon seek-back" @onclick="SeekBackButtonClickHandler"></div>
            <div class="icon seek-forward" @onclick="SeekForwardButtonClickHandler"></div>
            <div class="icon playpause @_playPauseIconState" @onclick="PauseButtonClickHandler"></div>
        </div>
        <div>
            <div id="trackposition" class="track-position">
                <p>@BuildTrackPosition()</p>
            </div>        
        </div>
    </div>
</div>

@code {
    private MopidyNowPlayingState _mopidyNowPlayingState = MopidyNowPlayingState.Default;
    private string _playPauseIconState = "pause";

    protected override async Task OnInitializedAsync()
    {
        HandleNewState(await MopidyProxy.GetNowPlaying());

        await base.OnInitializedAsync();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            MopidyProxy.OnMopidyNotification += MopidyNotificationHandler;
        }

        base.OnAfterRender(firstRender);
    }

    public void Dispose()
    {
        try
        {
            MopidyProxy.OnMopidyNotification -= MopidyNotificationHandler;
        }
        catch { }
    }

    private void MopidyNotificationHandler(object sender, MopidyNotificationEventArgs notification)
    {
        InvokeAsync(() =>
        {
            HandleNewState(notification.GetInfo());
            StateHasChanged();
        });
    }

    private void HandleNewState(MopidyNowPlayingState mopidyNowPlayingState)
    {
        _mopidyNowPlayingState = mopidyNowPlayingState;
        _playPauseIconState = _mopidyNowPlayingState.IsPlaying ? "pause" : "play";
    }

    private async void PauseButtonClickHandler()
    {
        await MopidyProxy.TogglePause();
    }

    private async void SeekBackButtonClickHandler()
    {
        await MopidyProxy.SeekRelative(-20000);
    }
    private async void SeekForwardButtonClickHandler()
    {
        await MopidyProxy.SeekRelative(10000);
    }

    private string BuildTrackPosition()
    {
        if (_mopidyNowPlayingState.TrackPositionMs > 0)
        {
            return _mopidyNowPlayingState.TrackLengthMs > 0
                ? $"{TimeHumaniser(_mopidyNowPlayingState.TrackPositionMs)} â¸± {TimeHumaniser(_mopidyNowPlayingState.TrackLengthMs)}"
                : $"{TimeHumaniser(_mopidyNowPlayingState.TrackPositionMs)}";
        }
        return "--:--";
    }
    
    private string TimeHumaniser(int timestampMs)
    {
        var ts = TimeSpan.FromMilliseconds(timestampMs);
        
        return ts.Hours > 0
            ? $"{(int)ts.TotalHours}:{ts.Minutes:D2}:{ts.Seconds:D2}"
            : $"{ts.Minutes}:{ts.Seconds:D2}";
    }

}
